<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
    
    <context:annotation-config />
    <context:component-scan base-package="cn.buaa" />
      
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 配置连接池的初始值 -->
		<property name="initialSize" value="1" />
		<!-- 连接池的最大值 -->
		<!-- <property name="maxActive" value="500"/> -->
		<!-- 最大空闲时，当经过一个高峰之后，连接池可以将一些用不到的连接释放，一直减少到maxIdle为止 -->
		<!-- <property name="maxIdle" value="2"/> -->
		<!-- 当最小空闲时，当连接少于minIdle时会自动去申请一些连接 -->
		<property name="minIdle" value="1" />
		<property name="maxActive" value="100" />
		<property name="maxIdle" value="20" />
		<property name="maxWait" value="1000" />
    </bean>
    <context:property-placeholder location="classpath:jdbc.properties"/>
    
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
	    <property name="dataSource" ref="dataSource"/>
	    <property name="packagesToScan">
	    	<value>cn.buaa.model</value>
	    </property>
	    <property name="hibernateProperties">
	      <props>
	      	<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
	      	<!-- <prop key="hibernate.show_sql">true</prop> -->
	      	<prop key="hibernate.hbm2ddl.auto">update</prop>
	      	<prop key="hibernate.format_sql">false</prop>
	      </props>
	    </property>
  	</bean>
  	<!-- 创建事务管理器-->
  	<bean id="txManager"  class="org.springframework.orm.hibernate3.HibernateTransactionManager">
    	<property name="sessionFactory" ref="sessionFactory"/>
  	</bean>
  	<!-- 配置AOP，Spring是通过AOP来进行事务管理的 声明式事物-->
  	<aop:config>
	    <aop:pointcut id="allMethods" expression="execution(* cn.buaa.service.*.*(..))"/>
	    <aop:advisor advice-ref="txAdvice" pointcut-ref="allMethods"/>
  	</aop:config>

  	<tx:advice id="txAdvice" transaction-manager="txManager">
	    <tx:attributes>
	      <tx:method name="*" propagation="REQUIRED" read-only="true"/>
	      <tx:method name="add*" propagation="REQUIRED"/>
	      <tx:method name="update*" propagation="REQUIRED"/>
	      <tx:method name="del*" propagation="REQUIRED"/>
	      <tx:method name="save*" propagation="REQUIRED"/>
	    </tx:attributes>
  	</tx:advice>
  	
  	<!--可以不用,因为继承HibernateDaoSupport就已经有了 
  	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
  		<property name="sessionFactory" ref="sessionFactory"/>
  	</bean> -->
</beans>
